const mongoose = require('mongoose');

const chatMessageSchema = new mongoose.Schema({
  chatId: {
    type: String,
    required: true,
    index: true
  },
  sender: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: false // Allow guest users
  },
  senderInfo: {
    name: {
      type: String,
      required: true,
      trim: true
    },
    phone: {
      type: String,
      match: [/^(\+8801|01)[3-9]\d{8}$/, 'Please enter a valid BD phone number']
    },
    email: String,
    avatar: {
      public_id: String,
      url: String
    },
    isGuest: {
      type: Boolean,
      default: true
    }
  },
  recipient: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: false
  },
  message: {
    type: String,
    required: false, // Allow empty messages when there are attachments
    trim: true,
    maxlength: [1000, 'Message cannot be more than 1000 characters']
  },
  messageType: {
    type: String,
    enum: ['text', 'image', 'file', 'system'],
    default: 'text'
  },
  attachments: [{
    type: {
      type: String,
      enum: ['image', 'document', 'video']
    },
    public_id: String,
    url: String,
    filename: String,
    size: Number
  }],
  isRead: {
    type: Boolean,
    default: false
  },
  readAt: Date,
  isFromAdmin: {
    type: Boolean,
    default: false
  },
  isSystemMessage: {
    type: Boolean,
    default: false
  },
  priority: {
    type: String,
    enum: ['low', 'normal', 'high', 'urgent'],
    default: 'normal'
  },
  tags: [String], // For categorizing messages
  replyTo: {
    type: mongoose.Schema.ObjectId,
    ref: 'ChatMessage'
  },
  isEdited: {
    type: Boolean,
    default: false
  },
  editedAt: Date,
  originalMessage: String,
  isDeleted: {
    type: Boolean,
    default: false
  },
  deletedAt: Date,
  deletedBy: {
    type: mongoose.Schema.ObjectId,
    ref: 'User'
  }
}, {
  timestamps: true
});

// Chat session schema for managing conversations
const chatSessionSchema = new mongoose.Schema({
  chatId: {
    type: String,
    unique: true,
    required: false // Auto-generated by pre-save hook
  },
  customer: {
    user: {
      type: mongoose.Schema.ObjectId,
      ref: 'User'
    },
    name: {
      type: String,
      required: true
    },
    phone: String,
    email: String,
    isGuest: {
      type: Boolean,
      default: true
    }
  },
  assignedAdmin: {
    type: mongoose.Schema.ObjectId,
    ref: 'User'
  },
  status: {
    type: String,
    enum: ['active', 'waiting', 'closed', 'archived'],
    default: 'waiting'
  },
  category: {
    type: String,
    enum: ['order_inquiry', 'product_question', 'complaint', 'support', 'general'],
    default: 'general'
  },
  priority: {
    type: String,
    enum: ['low', 'normal', 'high', 'urgent'],
    default: 'normal'
  },
  lastMessage: {
    content: String,
    timestamp: Date,
    isFromAdmin: Boolean
  },
  unreadCount: {
    customer: {
      type: Number,
      default: 0
    },
    admin: {
      type: Number,
      default: 0
    }
  },
  startedAt: {
    type: Date,
    default: Date.now
  },
  endedAt: Date,
  tags: [String],
  notes: String, // Admin notes
  rating: {
    value: {
      type: Number,
      min: 1,
      max: 5
    },
    feedback: String,
    ratedAt: Date
  },
  isArchived: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Indexes for efficient queries
chatMessageSchema.index({ chatId: 1, createdAt: -1 });
chatMessageSchema.index({ sender: 1 });
chatMessageSchema.index({ isRead: 1, isFromAdmin: 1 });

chatSessionSchema.index({ chatId: 1 });
chatSessionSchema.index({ status: 1 });
chatSessionSchema.index({ assignedAdmin: 1 });
chatSessionSchema.index({ 'customer.user': 1 });
chatSessionSchema.index({ createdAt: -1 });

// Compound indexes to prevent duplicate sessions
chatSessionSchema.index({ 'customer.user': 1, status: 1 }); // For authenticated users
chatSessionSchema.index({ 'customer.email': 1, 'customer.isGuest': 1, status: 1 }); // For guests
chatSessionSchema.index({ 'customer.phone': 1, status: 1 }); // Backup phone check

// Generate unique chatId
chatSessionSchema.pre('save', async function(next) {
  if (!this.chatId) {
    this.chatId = `CHAT_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  next();
});

const ChatMessage = mongoose.model('ChatMessage', chatMessageSchema);
const ChatSession = mongoose.model('ChatSession', chatSessionSchema);

module.exports = { ChatMessage, ChatSession }; 